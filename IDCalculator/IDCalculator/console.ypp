%{
#include <stdio.h>
#include <list>
#include "CModel.h"
    
void yyerror(char* s) {
	printf("%s",s);
}
    
extern int yylex();

CCommand* parse_result;
%}

%union {
    char* stringTerm;
    CNumData* num;
    CData* data;
    CExpression* exp;
    CExpList* expList;
    CExpList* rowList;
    CMatrix*  matrix;
    CCommand* command;
    CIdentifier* id;
}

%token CLEAR EQUAL SEMICOLON LBR RBR DASH 
%token OADD OSUB OMUL ODIV ID NUM

%type <command> command
%type <matrix> matrix
%type <data> data
%type <expList> expList
%type <rowList> rowList
%type <exp> exp
%type <num> num
%type <id> id

%left ID
%left EQUAL
%left NUM
%left ODIV

%start command

%%
command :	CLEAR                           {parse_result = new CClearCommand();YYACCEPT;}
        |	id EQUAL data                   {parse_result = new CAssignCommand($1,$3);}
        |	id                              {parse_result = new CVarCommand($1);};

data	:	matrix                          {$$ = $1;};
    
matrix	:	LBR rowList	RBR                 {$$ = new CMatrix(); $$->content = $2;};

rowList	:	expList                         {$$ = new CExpList(); $$->add($1);}
        |	expList SEMICOLON rowList       {$$ = $3; $3->add($1);};

expList :	exp                             {$$ = new CExpList(); $$->add($1);}
        |	exp expList                     {$$ = $2; $$->add($1);};

exp     :   num                             {$$ = $1;}
        |   num ODIV num                    {$$ = new CFracData($1->value,$3->value);}
        |   id                              {$$ = $1;};

id      :   ID                              {$$ = new CIdentifier(yylval.stringTerm);};
num     :   NUM                             {$$ = new CNumData(atoi(yylval.stringTerm));};
%%