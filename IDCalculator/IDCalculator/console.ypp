%{
#include <stdio.h>
#include <list>
#include "CModel.h"
    
void yyerror(char* s) {
	printf("%s",s);
}
    
extern int yylex();

CCommand* parse_result;
%}

%union {
    char* stringTerm;
    CExpression* data;
    CNumData* num;
    CExpression* exp;
    CExpList* expList;
    CExpList* dataList;
    CExpList* rowList;
    CExpList* params;
    CMatrix*  matrix;
    CCommand* command;
    CIdentifier* id;
    CFuncExpression* func;
}
%token COMMA SEMICOLON LBR RBR SIQ LP RP
%token CLEAR AS PLOT REMOVE ALL
%token EQUAL 
%token OADD OSUB OMUL ODIV OPWR
%token ID NUM DECIMAL
%token ABORT

%type <command> command
%type <matrix> matrix
%type <expList> expList
%type <rowList> rowList
%type <exp> exp
%type <num> num
%type <id> id
%type <func> func
%type <dataList> dataList
%type <data> data

%left LOW
%left EQUAL
%left NUM SEMICOLON ID
%left OADD OSUB
%left OMUL ODIV
%left OPWR
%left LP 
%left RP
%left SIQ

%left LV3
%left LV2
%left LV1

%start command

%%
command :	CLEAR                           {parse_result = new CClearCommand();YYACCEPT;}
        |	id EQUAL exp                    {parse_result = new CAssignCommand($1,$3);}
        |	exp                             {parse_result = new CExpCommand($1);}
        |   PLOT exp AS id                  {parse_result = new CPlotFuncCommand($2, $4);}
        |   PLOT REMOVE id                  {parse_result = new CPlotRemoveCommand($3);}
        |   PLOT REMOVE ALL                 {parse_result = new CPlotRemoveCommand();};

func    :   exp SIQ                         {CExpList* expList = new CExpList(); expList->add($1);$$ = new CFuncExpression(new
                                                CIdentifier("transpose"),expList);}
        |   id LP expList RP                {$$ = new CFuncExpression($1,$3);};

matrix	:	LBR rowList	RBR                 {$$ = new CMatrix(); $$->content = $2;};

rowList	:	dataList                        {$$ = new CExpList(); $$->insert(0,$1);}
        |	dataList SEMICOLON rowList      {$$ = $3; $3->insert(0,$1);};

expList :	exp                             {$$ = new CExpList(); $$->insert(0,$1);}
        |	exp COMMA expList               {$$ = $3; $$->insert(0,$1);};

exp     :   num       %prec NUM             {$$ = $1;}
        |   id        %prec ID              {$$ = $1;}
        |   LP exp RP                       {$$ = $2;}
        |   exp OADD exp                    {$$ = new CArithExpression($1,ADD,$3);}
        |   exp OSUB exp                    {$$ = new CArithExpression($1,SUB,$3);}
        |   OSUB exp  %prec OMUL            {$$ = new CArithExpression(NULL,SUB,$2);} 
        |   exp OMUL exp                    {$$ = new CArithExpression($1,MUL,$3);}
        |   exp ODIV exp                    {$$ = new CArithExpression($1,DIV,$3);}
        |   exp OPWR exp                    {$$ = new CPowerExpression($1,$3);}
        |   matrix                          {$$ = $1;}
        |   func                            {$$ = $1;};

dataList:   data                            {$$ = new CExpList(); $$->insert(0,$1);}
        |   data dataList                   {$$ = $2; $$->insert(0,$1);};

id      :   ID                              {$$ = new CIdentifier(yylval.stringTerm);};

data    :   exp  %prec LOW                  {$$ = $1;};

num     :   NUM                             {$$ = new CNumData(atoi(yylval.stringTerm));}
        |   DECIMAL                         {$$ = new CNumData(yylval.stringTerm);};
abort   :   ABORT                           {YYABORT;};
%%